[
  {
    "id": 0,
    "title": "什么是 Redis?",
    "content": "Redis 是一种基于键值对的 NoSQL 数据库。\r\n它主要的特点是把数据放在内存当中，相比直接访问磁盘的关系型数据库，读写速度会快很多，基本上能达到微秒级的响应。\r\n\r\n所以在一些对性能要求很高的场景，比如缓存热点数据、防止接口爆刷，都会用到 Redis。\r\n\r\n不仅如此，Redis 还支持持久化，可以将内存中的数据异步落盘，以便服务宕机重启后能恢复数据。",
    "tags": [
      "Redis"
    ],
    "img": "https://cdn.tobebetterjavaer.com/stutymore/redis-20250427143333.png",
    "review_count": 0,
    "next_review": 1752607632,
    "last_review": null,
    "interval_index": 0
  },
  {
    "id": 1,
    "title": "Redis 和 MySQL 的区别？",
    "content": "Redis 属于非关系型数据库，数据是通过键值对的形式放在内存当中的；MySQL 属于关系型数据库，数据以行和列的形式存储在磁盘当中。实际开发中，会将 MySQL 作为主存储，Redis 作为缓存，通过先查 Redis，未命中再查 MySQL 并写回Redis 的方式来提高系统的整体性能。\r\n",
    "tags": [
      "Redis"
    ],
    "img": "https://cdn.tobebetterjavaer.com/stutymore/redis-20250427152053.png",
    "review_count": 0,
    "next_review": 1752608500,
    "last_review": null,
    "interval_index": 0
  },
  {
    "id": 2,
    "title": "项目里哪里用到了 Redis？",
    "content": "比如说用户活跃排行榜用到了 zset，作者白名单用到了 set。还有用户登录后的 Session，用到了 Redis 的字符串。其中比较有挑战性的一个应用是，通过 Lua 脚本封装 Redis 的 setnex 命令来实现分布式锁，以保证在高并发场景下，热点文章在短时间内的高频访问不会击穿 MySQL。",
    "tags": [
      "Redis"
    ],
    "img": "",
    "review_count": 0,
    "next_review": 1752609102,
    "last_review": null,
    "interval_index": 0
  },
  {
    "id": 3,
    "title": "部署Redis ",
    "content": "在本地部署过单机版，下载 Redis 的安装包，解压后运行 redis-server 命令即可。",
    "tags": [
      "Redis"
    ],
    "img": "",
    "review_count": 0,
    "next_review": 1752609275,
    "last_review": null,
    "interval_index": 0
  },
  {
    "id": 4,
    "title": "Redis 的高可用方案的部署",
    "content": "有部署过哨兵机制，这是一个相对成熟的高可用解决方案，我们生产环境部署的是一主两从的 Redis 实例，再加上三个 Sentinel 节点监控它们。Sentinel 的配置相对简单，主要设置了故障转移的判定条件和超时阈值。\r\n当主节点发生故障时，Sentinel 能够自动检测并协商选出新的主节点，这个过程大概需要 10-15 秒。\r\n\r\n另一个大型项目中，我们使用了 Redis Cluster 集群方案。该项目数据量大且增长快，需要水平扩展能力。我们部署了 6 个主节点，每个主节点配备一个从节点，形成了一个 3主3从 的初始集群。Redis Cluster 的设置比 Sentinel 复杂一些，需要正确配置集群节点间通信、分片映射等。\r\nRedis Cluster 最大的优势是数据自动分片，我们可以通过简单地增加节点来扩展集群容量。此外，它的故障转移也很快，通常在几秒内就能完成。\r\n\r\n对于一些轻量级应用，我也使用过主从复制加手动故障转移的方案。主节点负责读写操作，从节点负责读操作。手动故障转移时，我们会先将从节点提升为主节点，然后重新配置其他从节点。",
    "tags": [
      "Redis"
    ],
    "img": "",
    "review_count": 0,
    "next_review": 1752609362,
    "last_review": null,
    "interval_index": 0
  },
  {
    "id": 5,
    "title": "Redis 可以用来干什么？",
    "content": "Redis 可以用来做缓存，比如说把高频访问的文章详情、商品信息、用户信息放入 Redis 当中，并通过设置过期时间来保证数据一致性，这样就可以减轻数据库的访问压力。\r\nRedis 的 Zset 还可以用来实现积分榜、热搜榜，通过 score 字段进行排序，然后取前 N 个元素，就能实现 TOPN 的榜单功能。利用 Redis 的 SETNX 命令或者 Redisson 还可以实现分布式锁，确保同一时间只有一个节点可以持有锁；为了防止出现死锁，可以给锁设置一个超时时间，到期后自动释放；并且最好开启一个监听线程，当任务尚未完成时给锁自动续期。如果是秒杀接口，还可以使用 Lua 脚本来实现令牌桶算法，限制每秒只能处理 N 个请求。",
    "tags": [
      "Redis"
    ],
    "img": "https://cdn.tobebetterjavaer.com/tobebetterjavaer/images/sidebar/sanfene/redis-d44c2397-5994-452f-8b7b-eb85d2b87685.png",
    "review_count": 0,
    "next_review": 1752609422,
    "last_review": null,
    "interval_index": 0
  },
  {
    "id": 6,
    "title": "Redis有哪些数据类型？",
    "content": "Redis 支持五种基本数据类型，分别是字符串、列表、哈希、集合和有序集合。还有三种扩展数据类型，分别是用于位级操作的 Bitmap、用于基数估算的 HyperLogLog、支持存储和查询地理坐标的 GEO。",
    "tags": [
      "Redis"
    ],
    "img": "https://cdn.tobebetterjavaer.com/tobebetterjavaer/images/sidebar/sanfene/redis-10434dc7-c7a3-4c1a-b484-de3fb37669ee.png",
    "review_count": 0,
    "next_review": 1752609459,
    "last_review": null,
    "interval_index": 0
  }
]